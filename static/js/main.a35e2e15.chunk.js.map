{"version":3,"sources":["config/color.js","views/Home.js","views/About.js","views/Users.js","views/Topics.js","views/Todos.js","views/Theme.js","App.js","reportWebVitals.js","index.js"],"names":["color","foregroud","backgroud","ThemeContext","React","createContext","Home","About","Users","useState","users","setUsers","a","fetch","data","json","res","list","onClick","map","item","name","id","Topics","match","useRouteMatch","console","log","useLocation","to","url","path","Topic","topicId","useParams","Todos","_todos","text","nanoid","todos","todo","type","Todo","Theme","useContext","theme","onChangeTheme","style","backgroundColor","App","getRandomColor","Math","floor","random","toString","setTheme","Provider","value","basename","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a35e2e15.chunk.js","sourcesContent":["import React from 'react'\n\n// 主题色\nconst color = {\n  light: {\n    foregroud: '#000',\n    backgroud: '#eee'\n  },\n  dark: {\n    foregroud: '#fff',\n    backgroud: '#222'\n  }\n}\n\nconst ThemeContext = React.createContext(color.light)\nexport {\n  ThemeContext,\n  color\n}","export default function Home() {\n  return <h2>home</h2>\n}","export default function About() {\n  return (\n    <>\n      <h2>about</h2>\n      <p>关于我：</p>\n      <p>非正经程序员</p>\n    </>\n  )\n}\n","import { useState } from \"react\"\n\nexport default function Users() {\n  const [users, setUsers] = useState([])\n  async function fetchData() {\n    let data = await fetch('https://api.codermore.com/api/list')\n    let res = await data.json()\n    setUsers(res.data.list)\n  }\n  return (\n    <>\n      <h3>Users</h3>\n      <button onClick={fetchData}>获取用户列表</button>\n      <ul>\n        {\n          users.map(item => <li key={item.id}>{item.name}</li>)\n        }\n      </ul>\n    </>\n  )\n}","import {\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n  useLocation\n} from 'react-router-dom';\n\nexport default function Topics() {\n  let match = useRouteMatch()\n  // ignore no-unused-vars\n  console.log(match)\n  console.log(useLocation())\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic></Topic>\n        </Route>\n        <Route to={match.path}>\n          <h3>Please seelct a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nfunction Topic() {\n  let {topicId} = useParams()\n  console.log(useParams())\n  return <h3>topic ID: {topicId}</h3>\n}","import {nanoid} from 'nanoid'\nimport { useState } from 'react'\n\nexport default function Todos() {\n  const textArr = ['选项一', '选项二', '选项三']\n  const _todos = textArr.map(text => ({\n    name: text,\n    id: nanoid()\n  }))\n  const [todos] = useState(_todos)\n  return (\n    <>\n      <ul>\n        {\n          todos.map((todo) => {\n            return Todo(todo)\n          })\n        }\n      </ul>\n    </>\n  )\n}\n\n\nfunction Todo(todo) {\n  return (\n    <li key={todo.id}>\n      <input type=\"checkbox\" /> {todo.name}\n    </li>\n  )\n}","import { useContext } from \"react\"\nimport {\n  ThemeContext\n} from '../config/color'\n\nexport default function Theme() {\n  const {theme, onChangeTheme} = useContext(ThemeContext)\n  return (\n    <>\n      <h3>theme</h3>\n      <p style={{\n        color: theme.foregroud,\n        backgroundColor: theme.backgroud\n      }}>theme.js</p>\n      <button onClick={onChangeTheme}>change theme</button>\n    </>\n  )\n}","import {\n  HashRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport React, { useState } from 'react'\nimport {\n  color,\n  ThemeContext\n} from './config/color'\nimport Home from './views/Home'\nimport About from './views/About'\nimport Users from './views/Users'\nimport Topics from './views/Topics'\nimport Todos from './views/Todos'\nimport Theme from './views/Theme'\nimport './App.css';\n\nfunction App() {\n  var getRandomColor = function(){\n    return '#'+Math.floor(Math.random()*16777215).toString(16);\n  }\n  function onChangeTheme() {\n    setTheme({\n      foregroud: getRandomColor(),\n      backgroud: getRandomColor()\n    })\n  }\n  const [theme, setTheme] = useState(color.light)\n  return (\n    <ThemeContext.Provider value={{theme, onChangeTheme}}>\n      <HashRouter basename=\"/github-actions-go\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n            <li>\n              <Link to=\"/topics\">Topics</Link>\n            </li>\n            <li>\n              <Link to=\"/todos\">Todos</Link>\n            </li>\n            <li>\n              <Link to=\"/theme\">Toggle Theme</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home></Home>\n          </Route>\n          <Route path=\"/about\">\n            <About></About>\n          </Route>\n          <Route path=\"/users\">\n            <Users></Users>\n          </Route>\n          <Route path=\"/topics\">\n            <Topics></Topics>\n          </Route>\n          <Route path=\"/todos\">\n            <Todos></Todos>\n          </Route>\n          <Route path=\"/theme\">\n            <Theme></Theme>\n          </Route>\n        </Switch>\n      </HashRouter>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}